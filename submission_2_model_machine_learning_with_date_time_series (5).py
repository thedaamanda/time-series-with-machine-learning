# -*- coding: utf-8 -*-
"""Submission_2_Model_Machine_Learning_with_Date_Time_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTEv2PzT5ltMnsdsN3u9UTXQUY-R2vE_

# **Submission 2 - Model Machine Learning with Date Time Series**

## **Muhammad Theda Amanda**

Dataset: https://www.kaggle.com/datasets/robikscube/hourly-energy-consumption

### **Import Libraries**
"""

import pandas as pd
import numpy as np
import os, zipfile
import matplotlib.pyplot as plt
from google.colab import files

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint

"""### **Import Dataset with Kaggle**"""

!pip install -q kaggle

uploaded = files.upload()

!chmod 600 /content/kaggle.json

!KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d robikscube/hourly-energy-consumption

local_zip = '/content/hourly-energy-consumption.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

"""### **Data Loading**"""

df = pd.read_csv('/content/PJME_hourly.csv')
df.head()

df.info()

df.isnull().sum()

dates = df['Datetime'].values
PJME_MW = df['PJME_MW'].values

df['Datetime'] = pd.to_datetime(df['Datetime'])
df.info()

"""### **Time Series Plot**"""

plt.figure(figsize=(15, 5))
plt.plot(dates, PJME_MW)
plt.title('PJME Energy Use in MW', fontsize=20)
plt.xlabel('Datetime')
plt.ylabel('Energy')
plt.show()

"""### **Modeling**"""

PJME_MW  = df['PJME_MW'].values.reshape(-1,1)
PJME_MW

scaler = MinMaxScaler(feature_range=(0,1))
PJME_MW  = scaler.fit_transform(PJME_MW)
PJME_MW.shape

X_train, X_test, y_train, y_test = train_test_split(PJME_MW, dates, test_size=0.2, shuffle=False)
print("X_train length:", len(X_train))
print("X_test length:", len(X_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=60, batch_size=64, shuffle_buffer=1000)
test_set  = windowed_dataset(X_test, window_size=60, batch_size=64, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(64, return_sequences=True, input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

model.summary()

"""### **Compile and Fit Model**"""

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=["mae"])

threshold_mae = (PJME_MW.max() - PJME_MW.min()) * 10/100
print("The maximum limit of mae value (10%) from the data is", threshold_mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if((logs.get('mae') < threshold_mae) and (logs.get('val_mae') < threshold_mae)):
      print("MAE < 10%")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(train_set, epochs=100, validation_data=test_set, verbose=2, callbacks=[callbacks])

"""### **Plot MAE & Loss**"""

plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'], linestyle='--')
plt.title('MAE')
plt.ylabel('MAE')
plt.xlabel('Epoch')
plt.legend(['Training Set', 'Validation Set'])
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'], linestyle='--')
plt.title('Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Training Set', 'Validation Set'])
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.show()